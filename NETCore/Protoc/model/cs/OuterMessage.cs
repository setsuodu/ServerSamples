// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ET {

  /// <summary>Holder for reflection information generated from OuterMessage.proto</summary>
  public static partial class OuterMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for OuterMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OuterMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJPdXRlck1lc3NhZ2UucHJvdG8SAkVUIiwKC0Vycm9yUGFja2V0EgwKBENv",
            "ZGUYASABKAUSDwoHTWVzc2FnZRgCIAEoCSINCgtFbXB0eVBhY2tldCInCgZU",
            "aGVNc2cSDAoETmFtZRgBIAEoCRIPCgdDb250ZW50GAIgASgJIikKClRoZU1z",
            "Z0xpc3QSCgoCSWQYASABKAUSDwoHQ29udGVudBgCIAMoCSIlChRDMlNfTG9n",
            "aW5Ub2tlblBhY2tldBINCgVUb2tlbhgBIAEoCSI1Cg9DMlNfTG9naW5QYWNr",
            "ZXQSEAoIVXNlcm5hbWUYASABKAkSEAoIUGFzc3dvcmQYAiABKAkiSQoVUzJD",
            "X0xvZ2luUmVzdWx0UGFja2V0EgwKBENvZGUYASABKAUSEAoIVXNlcm5hbWUY",
            "AiABKAkSEAoITmlja25hbWUYAyABKAkiIgoSQzJTX1Jvb21MaXN0UGFja2V0",
            "EgwKBFBhZ2UYASABKAUiSwoUQzJTX0NyZWF0ZVJvb21QYWNrZXQSEAoIUm9v",
            "bU5hbWUYASABKAkSDwoHUm9vbVB3ZBgCIAEoCRIQCghMaW1pdE51bRgDIAEo",
            "BSI1ChJDMlNfSm9pblJvb21QYWNrZXQSDgoGUm9vbUlEGAEgASgFEg8KB1Jv",
            "b21Qd2QYAiABKAkiKgoMUzJDX1Jvb21JbmZvEhoKBFJvb20YASABKAsyDC5F",
            "VC5Sb29tSW5mbyI8Cg9TMkNfR2V0Um9vbUxpc3QSGwoFUm9vbXMYASADKAsy",
            "DC5FVC5Sb29tSW5mbxIMCgRQYWdlGAIgASgFIkgKE1MyQ19MZWF2ZVJvb21Q",
            "YWNrZXQSDgoGUm9vbUlEGAEgASgFEhAKCFJvb21OYW1lGAIgASgJEg8KB0xl",
            "YXZlQnkYAyABKAUiOAoVQzJTX09wZXJhdGVTZWF0UGFja2V0Eg4KBlNlYXRJ",
            "RBgBIAEoBRIPCgdPcGVyYXRlGAIgASgFInwKCFJvb21JbmZvEg4KBlJvb21J",
            "RBgBIAEoBRIQCghSb29tTmFtZRgCIAEoCRIOCgZIYXNQd2QYAyABKAgSCwoD",
            "UHdkGAQgASgJEhAKCExpbWl0TnVtGAUgASgFEh8KB1BsYXllcnMYBiADKAsy",
            "Di5FVC5QbGF5ZXJJbmZvIkAKClBsYXllckluZm8SEAoIVXNlck5hbWUYASAB",
            "KAkSEAoITmlja05hbWUYAiABKAkSDgoGU2VhdElEGAMgASgFIjMKE1MyQ19H",
            "YW1lU3RhcnRQYWNrZXQSDQoFQ29sb3IYASABKAUSDQoFQ2FyZHMYAiADKAUi",
            "MwoSQzJTX1BsYXlDYXJkUGFja2V0Eg4KBkNhcmRJRBgBIAEoBRINCgVDb2xv",
            "chgCIAEoBSJDChJTMkNfUGxheUNhcmRQYWNrZXQSDgoGQ2FyZElEGAEgASgF",
            "Eg0KBUNvbG9yGAIgASgFEg4KBlNlYXRJRBgDIAEoBSIwCg5TMkNfRGVhbFBh",
            "Y2tldBIOCgZDYXJkSUQYASABKAUSDgoGU2VhdElEGAIgASgFIiQKElMyQ19O",
            "ZXh0VHVyblBhY2tldBIOCgZTZWF0SUQYASABKAUiJAoUUzJDX0dhbWVSZXN1",
            "bHRQYWNrZXQSDAoEUmFuaxgBIAMoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.ErrorPacket), global::ET.ErrorPacket.Parser, new[]{ "Code", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.EmptyPacket), global::ET.EmptyPacket.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.TheMsg), global::ET.TheMsg.Parser, new[]{ "Name", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.TheMsgList), global::ET.TheMsgList.Parser, new[]{ "Id", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_LoginTokenPacket), global::ET.C2S_LoginTokenPacket.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_LoginPacket), global::ET.C2S_LoginPacket.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_LoginResultPacket), global::ET.S2C_LoginResultPacket.Parser, new[]{ "Code", "Username", "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_RoomListPacket), global::ET.C2S_RoomListPacket.Parser, new[]{ "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_CreateRoomPacket), global::ET.C2S_CreateRoomPacket.Parser, new[]{ "RoomName", "RoomPwd", "LimitNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_JoinRoomPacket), global::ET.C2S_JoinRoomPacket.Parser, new[]{ "RoomID", "RoomPwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_RoomInfo), global::ET.S2C_RoomInfo.Parser, new[]{ "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_GetRoomList), global::ET.S2C_GetRoomList.Parser, new[]{ "Rooms", "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_LeaveRoomPacket), global::ET.S2C_LeaveRoomPacket.Parser, new[]{ "RoomID", "RoomName", "LeaveBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_OperateSeatPacket), global::ET.C2S_OperateSeatPacket.Parser, new[]{ "SeatID", "Operate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.RoomInfo), global::ET.RoomInfo.Parser, new[]{ "RoomID", "RoomName", "HasPwd", "Pwd", "LimitNum", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.PlayerInfo), global::ET.PlayerInfo.Parser, new[]{ "UserName", "NickName", "SeatID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_GameStartPacket), global::ET.S2C_GameStartPacket.Parser, new[]{ "Color", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.C2S_PlayCardPacket), global::ET.C2S_PlayCardPacket.Parser, new[]{ "CardID", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_PlayCardPacket), global::ET.S2C_PlayCardPacket.Parser, new[]{ "CardID", "Color", "SeatID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_DealPacket), global::ET.S2C_DealPacket.Parser, new[]{ "CardID", "SeatID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_NextTurnPacket), global::ET.S2C_NextTurnPacket.Parser, new[]{ "SeatID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ET.S2C_GameResultPacket), global::ET.S2C_GameResultPacket.Parser, new[]{ "Rank" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 错误码
  /// </summary>
  public sealed partial class ErrorPacket : pb::IMessage<ErrorPacket> {
    private static readonly pb::MessageParser<ErrorPacket> _parser = new pb::MessageParser<ErrorPacket>(() => new ErrorPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorPacket(ErrorPacket other) : this() {
      code_ = other.code_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorPacket Clone() {
      return new ErrorPacket(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorPacket other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///message Empty {} //注意括号不能写在一行，工具不认。
  /// </summary>
  public sealed partial class EmptyPacket : pb::IMessage<EmptyPacket> {
    private static readonly pb::MessageParser<EmptyPacket> _parser = new pb::MessageParser<EmptyPacket>(() => new EmptyPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyPacket(EmptyPacket other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyPacket Clone() {
      return new EmptyPacket(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyPacket other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 聊天
  /// </summary>
  public sealed partial class TheMsg : pb::IMessage<TheMsg> {
    private static readonly pb::MessageParser<TheMsg> _parser = new pb::MessageParser<TheMsg>(() => new TheMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TheMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TheMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TheMsg(TheMsg other) : this() {
      name_ = other.name_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TheMsg Clone() {
      return new TheMsg(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TheMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TheMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TheMsg other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TheMsgList : pb::IMessage<TheMsgList> {
    private static readonly pb::MessageParser<TheMsgList> _parser = new pb::MessageParser<TheMsgList>(() => new TheMsgList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TheMsgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TheMsgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TheMsgList(TheMsgList other) : this() {
      id_ = other.id_;
      content_ = other.content_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TheMsgList Clone() {
      return new TheMsgList(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_content_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> content_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Content {
      get { return content_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TheMsgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TheMsgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!content_.Equals(other.content_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= content_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      content_.WriteTo(output, _repeated_content_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += content_.CalculateSize(_repeated_content_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TheMsgList other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      content_.Add(other.content_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            content_.AddEntriesFrom(input, _repeated_content_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录
  /// </summary>
  public sealed partial class C2S_LoginTokenPacket : pb::IMessage<C2S_LoginTokenPacket> {
    private static readonly pb::MessageParser<C2S_LoginTokenPacket> _parser = new pb::MessageParser<C2S_LoginTokenPacket>(() => new C2S_LoginTokenPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LoginTokenPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginTokenPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginTokenPacket(C2S_LoginTokenPacket other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginTokenPacket Clone() {
      return new C2S_LoginTokenPacket(this);
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LoginTokenPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LoginTokenPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LoginTokenPacket other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_LoginPacket : pb::IMessage<C2S_LoginPacket> {
    private static readonly pb::MessageParser<C2S_LoginPacket> _parser = new pb::MessageParser<C2S_LoginPacket>(() => new C2S_LoginPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LoginPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginPacket(C2S_LoginPacket other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginPacket Clone() {
      return new C2S_LoginPacket(this);
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LoginPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LoginPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LoginPacket other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_LoginResultPacket : pb::IMessage<S2C_LoginResultPacket> {
    private static readonly pb::MessageParser<S2C_LoginResultPacket> _parser = new pb::MessageParser<S2C_LoginResultPacket>(() => new S2C_LoginResultPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LoginResultPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginResultPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginResultPacket(S2C_LoginResultPacket other) : this() {
      code_ = other.code_;
      username_ = other.username_;
      nickname_ = other.nickname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginResultPacket Clone() {
      return new S2C_LoginResultPacket(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    ///string PeerId;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LoginResultPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LoginResultPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Username != other.Username) return false;
      if (Nickname != other.Nickname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LoginResultPacket other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间
  /// </summary>
  public sealed partial class C2S_RoomListPacket : pb::IMessage<C2S_RoomListPacket> {
    private static readonly pb::MessageParser<C2S_RoomListPacket> _parser = new pb::MessageParser<C2S_RoomListPacket>(() => new C2S_RoomListPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomListPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomListPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomListPacket(C2S_RoomListPacket other) : this() {
      page_ = other.page_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomListPacket Clone() {
      return new C2S_RoomListPacket(this);
    }

    /// <summary>Field number for the "Page" field.</summary>
    public const int PageFieldNumber = 1;
    private int page_;
    /// <summary>
    ///页面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomListPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomListPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Page != other.Page) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Page != 0) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomListPacket other) {
      if (other == null) {
        return;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_CreateRoomPacket : pb::IMessage<C2S_CreateRoomPacket> {
    private static readonly pb::MessageParser<C2S_CreateRoomPacket> _parser = new pb::MessageParser<C2S_CreateRoomPacket>(() => new C2S_CreateRoomPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateRoomPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoomPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoomPacket(C2S_CreateRoomPacket other) : this() {
      roomName_ = other.roomName_;
      roomPwd_ = other.roomPwd_;
      limitNum_ = other.limitNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoomPacket Clone() {
      return new C2S_CreateRoomPacket(this);
    }

    /// <summary>Field number for the "RoomName" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    ///房间名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomPwd" field.</summary>
    public const int RoomPwdFieldNumber = 2;
    private string roomPwd_ = "";
    /// <summary>
    ///房间密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomPwd {
      get { return roomPwd_; }
      set {
        roomPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LimitNum" field.</summary>
    public const int LimitNumFieldNumber = 3;
    private int limitNum_;
    /// <summary>
    ///玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitNum {
      get { return limitNum_; }
      set {
        limitNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateRoomPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateRoomPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (RoomPwd != other.RoomPwd) return false;
      if (LimitNum != other.LimitNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomPwd.Length != 0) hash ^= RoomPwd.GetHashCode();
      if (LimitNum != 0) hash ^= LimitNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (RoomPwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomPwd);
      }
      if (LimitNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LimitNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomPwd);
      }
      if (LimitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateRoomPacket other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomPwd.Length != 0) {
        RoomPwd = other.RoomPwd;
      }
      if (other.LimitNum != 0) {
        LimitNum = other.LimitNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            RoomPwd = input.ReadString();
            break;
          }
          case 24: {
            LimitNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_JoinRoomPacket : pb::IMessage<C2S_JoinRoomPacket> {
    private static readonly pb::MessageParser<C2S_JoinRoomPacket> _parser = new pb::MessageParser<C2S_JoinRoomPacket>(() => new C2S_JoinRoomPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_JoinRoomPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoomPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoomPacket(C2S_JoinRoomPacket other) : this() {
      roomID_ = other.roomID_;
      roomPwd_ = other.roomPwd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoomPacket Clone() {
      return new C2S_JoinRoomPacket(this);
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    /// <summary>
    ///房间Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "RoomPwd" field.</summary>
    public const int RoomPwdFieldNumber = 2;
    private string roomPwd_ = "";
    /// <summary>
    ///房间密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomPwd {
      get { return roomPwd_; }
      set {
        roomPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_JoinRoomPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_JoinRoomPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (RoomPwd != other.RoomPwd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (RoomPwd.Length != 0) hash ^= RoomPwd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      if (RoomPwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomPwd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (RoomPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomPwd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_JoinRoomPacket other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.RoomPwd.Length != 0) {
        RoomPwd = other.RoomPwd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18: {
            RoomPwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomInfo : pb::IMessage<S2C_RoomInfo> {
    private static readonly pb::MessageParser<S2C_RoomInfo> _parser = new pb::MessageParser<S2C_RoomInfo>(() => new S2C_RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomInfo(S2C_RoomInfo other) : this() {
      Room = other.room_ != null ? other.Room.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomInfo Clone() {
      return new S2C_RoomInfo(this);
    }

    /// <summary>Field number for the "Room" field.</summary>
    public const int RoomFieldNumber = 1;
    private global::ET.RoomInfo room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ET.RoomInfo Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Room, other.Room)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (room_ != null) hash ^= Room.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (room_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::ET.RoomInfo();
        }
        Room.MergeFrom(other.Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (room_ == null) {
              room_ = new global::ET.RoomInfo();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetRoomList : pb::IMessage<S2C_GetRoomList> {
    private static readonly pb::MessageParser<S2C_GetRoomList> _parser = new pb::MessageParser<S2C_GetRoomList>(() => new S2C_GetRoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetRoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRoomList(S2C_GetRoomList other) : this() {
      rooms_ = other.rooms_.Clone();
      page_ = other.page_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRoomList Clone() {
      return new S2C_GetRoomList(this);
    }

    /// <summary>Field number for the "Rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ET.RoomInfo> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::ET.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::ET.RoomInfo> rooms_ = new pbc::RepeatedField<global::ET.RoomInfo>();
    /// <summary>
    ///房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ET.RoomInfo> Rooms {
      get { return rooms_; }
    }

    /// <summary>Field number for the "Page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    /// <summary>
    ///页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetRoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetRoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      if (Page != other.Page) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetRoomList other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
      if (other.Page != 0) {
        Page = other.Page;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_LeaveRoomPacket : pb::IMessage<S2C_LeaveRoomPacket> {
    private static readonly pb::MessageParser<S2C_LeaveRoomPacket> _parser = new pb::MessageParser<S2C_LeaveRoomPacket>(() => new S2C_LeaveRoomPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LeaveRoomPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveRoomPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveRoomPacket(S2C_LeaveRoomPacket other) : this() {
      roomID_ = other.roomID_;
      roomName_ = other.roomName_;
      leaveBy_ = other.leaveBy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveRoomPacket Clone() {
      return new S2C_LeaveRoomPacket(this);
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    /// <summary>
    ///房间Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "RoomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    /// <summary>
    ///房间名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeaveBy" field.</summary>
    public const int LeaveByFieldNumber = 3;
    private int leaveBy_;
    /// <summary>
    ///0.自己离开，1.被房主移除，2.房间解散，3.游戏结束？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaveBy {
      get { return leaveBy_; }
      set {
        leaveBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LeaveRoomPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LeaveRoomPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (RoomName != other.RoomName) return false;
      if (LeaveBy != other.LeaveBy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (LeaveBy != 0) hash ^= LeaveBy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (LeaveBy != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeaveBy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (LeaveBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveBy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LeaveRoomPacket other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.LeaveBy != 0) {
        LeaveBy = other.LeaveBy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            LeaveBy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_OperateSeatPacket : pb::IMessage<C2S_OperateSeatPacket> {
    private static readonly pb::MessageParser<C2S_OperateSeatPacket> _parser = new pb::MessageParser<C2S_OperateSeatPacket>(() => new C2S_OperateSeatPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_OperateSeatPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_OperateSeatPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_OperateSeatPacket(C2S_OperateSeatPacket other) : this() {
      seatID_ = other.seatID_;
      operate_ = other.operate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_OperateSeatPacket Clone() {
      return new C2S_OperateSeatPacket(this);
    }

    /// <summary>Field number for the "SeatID" field.</summary>
    public const int SeatIDFieldNumber = 1;
    private int seatID_;
    /// <summary>
    ///被操作的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    /// <summary>Field number for the "Operate" field.</summary>
    public const int OperateFieldNumber = 2;
    private int operate_;
    /// <summary>
    ///操作类型（0.添加机器人，1.踢人）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_OperateSeatPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_OperateSeatPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatID != other.SeatID) return false;
      if (Operate != other.Operate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatID != 0) hash ^= SeatID.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatID);
      }
      if (Operate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Operate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_OperateSeatPacket other) {
      if (other == null) {
        return;
      }
      if (other.SeatID != 0) {
        SeatID = other.SeatID;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatID = input.ReadInt32();
            break;
          }
          case 16: {
            Operate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工具不支持使用enum
  ///enum OperateType
  ///{
  ///	ADD_BOT 		= 0; //Proto3中，首成员必须是0。
  ///	KICK_PLAYER 	= 1;
  ///}
  ///房间信息
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      roomID_ = other.roomID_;
      roomName_ = other.roomName_;
      hasPwd_ = other.hasPwd_;
      pwd_ = other.pwd_;
      limitNum_ = other.limitNum_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    /// <summary>
    ///房间Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "RoomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    /// <summary>
    ///房间名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasPwd" field.</summary>
    public const int HasPwdFieldNumber = 3;
    private bool hasPwd_;
    /// <summary>
    ///有无密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPwd {
      get { return hasPwd_; }
      set {
        hasPwd_ = value;
      }
    }

    /// <summary>Field number for the "Pwd" field.</summary>
    public const int PwdFieldNumber = 4;
    private string pwd_ = "";
    /// <summary>
    ///密码（仅创建时下发给房主）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LimitNum" field.</summary>
    public const int LimitNumFieldNumber = 5;
    private int limitNum_;
    /// <summary>
    ///人数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitNum {
      get { return limitNum_; }
      set {
        limitNum_ = value;
      }
    }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ET.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(50, global::ET.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ET.PlayerInfo> players_ = new pbc::RepeatedField<global::ET.PlayerInfo>();
    /// <summary>
    ///玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ET.PlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (RoomName != other.RoomName) return false;
      if (HasPwd != other.HasPwd) return false;
      if (Pwd != other.Pwd) return false;
      if (LimitNum != other.LimitNum) return false;
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (HasPwd != false) hash ^= HasPwd.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (LimitNum != 0) hash ^= LimitNum.GetHashCode();
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (HasPwd != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasPwd);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Pwd);
      }
      if (LimitNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LimitNum);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasPwd != false) {
        size += 1 + 1;
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (LimitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitNum);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.HasPwd != false) {
        HasPwd = other.HasPwd;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      if (other.LimitNum != 0) {
        LimitNum = other.LimitNum;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            HasPwd = input.ReadBool();
            break;
          }
          case 34: {
            Pwd = input.ReadString();
            break;
          }
          case 40: {
            LimitNum = input.ReadInt32();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间内玩家信息
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      userName_ = other.userName_;
      nickName_ = other.nickName_;
      seatID_ = other.seatID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///string PeerId 	= 1; //连接号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SeatID" field.</summary>
    public const int SeatIDFieldNumber = 3;
    private int seatID_;
    /// <summary>
    ///座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (NickName != other.NickName) return false;
      if (SeatID != other.SeatID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (SeatID != 0) hash ^= SeatID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (SeatID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SeatID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.SeatID != 0) {
        SeatID = other.SeatID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            SeatID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///颜色和手牌（游戏开始、重连）
  /// </summary>
  public sealed partial class S2C_GameStartPacket : pb::IMessage<S2C_GameStartPacket> {
    private static readonly pb::MessageParser<S2C_GameStartPacket> _parser = new pb::MessageParser<S2C_GameStartPacket>(() => new S2C_GameStartPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GameStartPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameStartPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameStartPacket(S2C_GameStartPacket other) : this() {
      color_ = other.color_;
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameStartPacket Clone() {
      return new S2C_GameStartPacket(this);
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 1;
    private int color_;
    /// <summary>
    ///颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///5张手牌的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GameStartPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GameStartPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != 0) hash ^= Color.GetHashCode();
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Color);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GameStartPacket other) {
      if (other == null) {
        return;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Color = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出牌
  /// </summary>
  public sealed partial class C2S_PlayCardPacket : pb::IMessage<C2S_PlayCardPacket> {
    private static readonly pb::MessageParser<C2S_PlayCardPacket> _parser = new pb::MessageParser<C2S_PlayCardPacket>(() => new C2S_PlayCardPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PlayCardPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlayCardPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlayCardPacket(C2S_PlayCardPacket other) : this() {
      cardID_ = other.cardID_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlayCardPacket Clone() {
      return new C2S_PlayCardPacket(this);
    }

    /// <summary>Field number for the "CardID" field.</summary>
    public const int CardIDFieldNumber = 1;
    private int cardID_;
    /// <summary>
    ///唯一识别号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardID {
      get { return cardID_; }
      set {
        cardID_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 2;
    private int color_;
    /// <summary>
    ///彩色牌指定颜色，根据颜色enum。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PlayCardPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PlayCardPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardID != other.CardID) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardID != 0) hash ^= CardID.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardID);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardID);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PlayCardPacket other) {
      if (other == null) {
        return;
      }
      if (other.CardID != 0) {
        CardID = other.CardID;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardID = input.ReadInt32();
            break;
          }
          case 16: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_PlayCardPacket : pb::IMessage<S2C_PlayCardPacket> {
    private static readonly pb::MessageParser<S2C_PlayCardPacket> _parser = new pb::MessageParser<S2C_PlayCardPacket>(() => new S2C_PlayCardPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_PlayCardPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlayCardPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlayCardPacket(S2C_PlayCardPacket other) : this() {
      cardID_ = other.cardID_;
      color_ = other.color_;
      seatID_ = other.seatID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PlayCardPacket Clone() {
      return new S2C_PlayCardPacket(this);
    }

    /// <summary>Field number for the "CardID" field.</summary>
    public const int CardIDFieldNumber = 1;
    private int cardID_;
    /// <summary>
    ///唯一识别号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardID {
      get { return cardID_; }
      set {
        cardID_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 2;
    private int color_;
    /// <summary>
    ///彩色牌指定颜色，根据颜色enum。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "SeatID" field.</summary>
    public const int SeatIDFieldNumber = 3;
    private int seatID_;
    /// <summary>
    ///出牌人的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_PlayCardPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_PlayCardPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardID != other.CardID) return false;
      if (Color != other.Color) return false;
      if (SeatID != other.SeatID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardID != 0) hash ^= CardID.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (SeatID != 0) hash ^= SeatID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardID);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Color);
      }
      if (SeatID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SeatID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardID);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_PlayCardPacket other) {
      if (other == null) {
        return;
      }
      if (other.CardID != 0) {
        CardID = other.CardID;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.SeatID != 0) {
        SeatID = other.SeatID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardID = input.ReadInt32();
            break;
          }
          case 16: {
            Color = input.ReadInt32();
            break;
          }
          case 24: {
            SeatID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发牌
  /// </summary>
  public sealed partial class S2C_DealPacket : pb::IMessage<S2C_DealPacket> {
    private static readonly pb::MessageParser<S2C_DealPacket> _parser = new pb::MessageParser<S2C_DealPacket>(() => new S2C_DealPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DealPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DealPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DealPacket(S2C_DealPacket other) : this() {
      cardID_ = other.cardID_;
      seatID_ = other.seatID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DealPacket Clone() {
      return new S2C_DealPacket(this);
    }

    /// <summary>Field number for the "CardID" field.</summary>
    public const int CardIDFieldNumber = 1;
    private int cardID_;
    /// <summary>
    ///唯一识别号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardID {
      get { return cardID_; }
      set {
        cardID_ = value;
      }
    }

    /// <summary>Field number for the "SeatID" field.</summary>
    public const int SeatIDFieldNumber = 2;
    private int seatID_;
    /// <summary>
    ///发给的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DealPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DealPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardID != other.CardID) return false;
      if (SeatID != other.SeatID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardID != 0) hash ^= CardID.GetHashCode();
      if (SeatID != 0) hash ^= SeatID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardID);
      }
      if (SeatID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardID);
      }
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DealPacket other) {
      if (other == null) {
        return;
      }
      if (other.CardID != 0) {
        CardID = other.CardID;
      }
      if (other.SeatID != 0) {
        SeatID = other.SeatID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardID = input.ReadInt32();
            break;
          }
          case 16: {
            SeatID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_NextTurnPacket : pb::IMessage<S2C_NextTurnPacket> {
    private static readonly pb::MessageParser<S2C_NextTurnPacket> _parser = new pb::MessageParser<S2C_NextTurnPacket>(() => new S2C_NextTurnPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_NextTurnPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_NextTurnPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_NextTurnPacket(S2C_NextTurnPacket other) : this() {
      seatID_ = other.seatID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_NextTurnPacket Clone() {
      return new S2C_NextTurnPacket(this);
    }

    /// <summary>Field number for the "SeatID" field.</summary>
    public const int SeatIDFieldNumber = 1;
    private int seatID_;
    /// <summary>
    ///下个出牌人的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_NextTurnPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_NextTurnPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatID != other.SeatID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatID != 0) hash ^= SeatID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_NextTurnPacket other) {
      if (other == null) {
        return;
      }
      if (other.SeatID != 0) {
        SeatID = other.SeatID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///比赛结果
  /// </summary>
  public sealed partial class S2C_GameResultPacket : pb::IMessage<S2C_GameResultPacket> {
    private static readonly pb::MessageParser<S2C_GameResultPacket> _parser = new pb::MessageParser<S2C_GameResultPacket>(() => new S2C_GameResultPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GameResultPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ET.OuterMessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameResultPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameResultPacket(S2C_GameResultPacket other) : this() {
      rank_ = other.rank_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GameResultPacket Clone() {
      return new S2C_GameResultPacket(this);
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_rank_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> rank_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///索引是座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rank {
      get { return rank_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GameResultPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GameResultPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rank_.Equals(other.rank_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rank_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rank_.WriteTo(output, _repeated_rank_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rank_.CalculateSize(_repeated_rank_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GameResultPacket other) {
      if (other == null) {
        return;
      }
      rank_.Add(other.rank_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            rank_.AddEntriesFrom(input, _repeated_rank_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
